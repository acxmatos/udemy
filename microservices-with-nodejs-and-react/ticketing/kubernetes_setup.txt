# ------------------------------------
# Normal project initialization
# ------------------------------------
# Start local minikube
minikube start

# This is needed to configure local docker cli to connect to the minikube docker daemon, instead of local daemon.
# IMPORTANT 1: you need to rebuild all images into minikube after running this command, as the local docker daemon images WILL NOT be available inside minikube
# IMPORTANT 2: if running this command from inside a script, it should run with "dot space" notation (. my_script.sh), in order to the variables to be set in the current shell
eval $(minikube docker-env)

# Start skaffold on the project root folder
skaffold dev

# ------------------------------------
# Relevant commands
# ------------------------------------

# Create secret to store jwt signing key
kubectl create secret generic jwt-secret --from-literal JWT_KEY=my_super_secret_jwt_key

# Create secret to store stripe secret key
kubectl create secret generic stripe-secret --from-literal STRIPE_KEY=my_super_secret_stripe_key

# Enable ingress service on minikube
minikube addons enable ingress

# List current contexts setup for kubectl client
kubectl config get-contexts

# Toggle between kubectl contexts
kubectl config use-context gke_ticketing-dev-280815_us-central1-c_ticketing-dev
kubectl config use-context minikube

# For lecture 211. Cross Namespace Service Communication
# If you are running kubernates on Linux/Ubuntu, after you enable ingress running the command "minikube addons enable ingress", you must expose the service, that is not created.
# You can do this by running the command:
kubectl expose deployment ingress-nginx-controller --target-port=80 --type=ClusterIP -n kube-system
#
# After it would be possible to access the nginx-ingress-controller setting up the url like this:
# http://ingress-nginx-controller.kube-system.svc.cluster.local/api/users/currentuser

# Expose a pod to the outside world using port forward (STRICTLY FOR DEVELOPMENT PURPOSES!)
# P.S.: command will hang, need to leave it running
kubectl port-forward <pod_name> local_port:pod_port
